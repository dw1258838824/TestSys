package com.ruoyi.project.system.student.controller;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import com.ruoyi.framework.aspectj.lang.annotation.Log;
import com.ruoyi.framework.aspectj.lang.enums.BusinessType;
import com.ruoyi.project.system.computer.controller.ExamController;
import com.ruoyi.project.system.dept.domain.Dept;
import com.ruoyi.project.system.role.domain.Role;
import com.ruoyi.project.system.student.domain.Student;
import com.ruoyi.project.system.student.service.IStudentService;
import com.ruoyi.project.system.user.domain.User;
import com.ruoyi.project.system.user.service.IUserService;
import com.testsys.utils.ClassInUtils;
import com.ruoyi.framework.web.controller.BaseController;
import com.ruoyi.framework.web.domain.AjaxResult;
import com.alibaba.fastjson.JSONObject;
import com.google.common.collect.Maps;
import com.ruoyi.common.utils.RequestUtils;
import com.ruoyi.common.utils.StringUtils;
import com.ruoyi.common.utils.poi.ExcelUtil;
import com.ruoyi.framework.web.page.TableDataInfo;

/**
 * 学员Controller
 * 
 * @author ruoyi
 * @date 2020-06-05
 */
@Controller
@RequestMapping("/system/student")
public class StudentController extends BaseController
{
    private String prefix = "system/student";

    @Autowired
    private IStudentService studentService;
    
    @Autowired
    private IUserService userService;

    @RequiresPermissions("system:student:view")
    @GetMapping()
    public String student(ModelMap mmap)
    {
    	List<Role> roles = getSysUser().getRoles();
		for(Role r : roles) {
			if(r.getRoleId() == 1 || r.getRoleId() == 101) {
				break;
			}else if(r.getRoleId() == 102) {//如果不是管理员 且为老师
				mmap.put("myDept",getSysUser().getDeptId());
			}
		}
        return prefix + "/student";
    }

    /**
     * 查询学员列表
     */
    @RequiresPermissions("system:student:list")
    @PostMapping("/list")
    @ResponseBody
    public TableDataInfo list(Student student)
    {
        startPage();
        List<Student> list = studentService.selectStudentList(student);
        return getDataTable(list);
    }

    /**
     * 导出学员列表
     */
    @RequiresPermissions("system:student:export")
    @Log(title = "学员", businessType = BusinessType.EXPORT)
    @PostMapping("/export")
    @ResponseBody
    public AjaxResult export(Student student)
    {
        List<Student> list = studentService.selectStudentList(student);
        ExcelUtil<Student> util = new ExcelUtil<Student>(Student.class);
        return util.exportExcel(list, "student");
    }

    /**
     * 新增学员
     */
    @GetMapping("/add")
    public String add()
    {
        return prefix + "/add";
    }

    /**
     * 新增保存学员
     */
    @RequiresPermissions("system:student:add")
    @Log(title = "学员", businessType = BusinessType.INSERT)
    @PostMapping("/add")
    @ResponseBody
    public AjaxResult addSave(Student student)
    {
    	int result = studentService.insertStudent(student);
        return toAjax(result);
    }

    /**
     * 修改学员
     */
    @GetMapping("/edit/{studentId}")
    public String edit(@PathVariable("studentId") Long studentId, ModelMap mmap)
    {
        Student student = studentService.selectStudentById(studentId);
        mmap.put("student", student);
        mmap.put("user", userService.selectUserById(student.getUserId()));
        return prefix + "/edit";
    }

    /**
     * 修改保存学员
     */
    @RequiresPermissions("system:student:edit")
    @Log(title = "学员", businessType = BusinessType.UPDATE)
    @PostMapping("/edit")
    @ResponseBody
    public AjaxResult editSave(Student student,HttpServletRequest request)
    {
    	if(StringUtils.isNotEmpty(request.getParameter("deptId"))) {
	    	User user = new User();
	    	user.setUserId(student.getUserId());
	    	user.setDeptId(Long.parseLong(request.getParameter("deptId").toString()));
	    	userService.updateUser(user);
    	}
        return toAjax(studentService.updateStudent(student));
    }

    /**
     * 删除学员
     */
    @RequiresPermissions("system:student:remove")
    @Log(title = "学员", businessType = BusinessType.DELETE)
    @PostMapping( "/remove")
    @ResponseBody
    public AjaxResult remove(String ids)
    {
        return toAjax(studentService.deleteStudentByIds(ids));
    }

    /**
     * 删除学员人脸识别
     */
    @Log(title = "学员", businessType = BusinessType.UPDATE)
    @PostMapping( "/removeFace")
    @ResponseBody
    public AjaxResult removeFace(String ids)
    {
        return toAjax(studentService.deleteFaceStudentByIds(ids));
    }
    
    @SuppressWarnings("unchecked")
	@GetMapping("/showlevel")
    @ResponseBody
    public List<Map<String, Object>> showlevel(HttpServletRequest request)
    {
        return studentService.selectStudentLevelInfo(RequestUtils.getRequestMap(request));
    }
}
