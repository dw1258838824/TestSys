package com.ruoyi.project.system.computer.controller;

import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.google.common.collect.Lists;
import com.ruoyi.common.utils.RequestUtils;
import com.ruoyi.common.utils.StringUtils;
import com.ruoyi.common.utils.security.ShiroUtils;
import com.ruoyi.framework.web.controller.BaseController;
import com.ruoyi.project.system.exam.domain.TExam;
import com.ruoyi.project.system.exam.service.ITExamService;
import com.ruoyi.project.system.examstudent.domain.TQuestionRecord;
import com.ruoyi.project.system.examstudent.domain.TRoomExamStudent;
import com.ruoyi.project.system.examstudent.service.ITRoomExamStudentService;
import com.ruoyi.project.system.paper.domain.TPaper;
import com.ruoyi.project.system.paper.service.ITPaperService;

import io.swagger.annotations.Api;

@Api("考试API")
@Controller
@RequestMapping("/student/exam")
public class ExamController  extends BaseController{
	
	private String prefix = "system/computer";
	
	@Autowired
    private ITExamService tExamService;
	
	@Autowired
	private ITRoomExamStudentService tRoomExamStudentService;
	
	@Autowired
	private ITPaperService tPaperService;
	
	@GetMapping("/start/{examId}")
    public String startExam(@PathVariable("examId") Long examId, ModelMap mmap) {
    	mmap.put("examId", examId);
    	mmap.put("studentId", ShiroUtils.getSysUser().getStudent().getStudentId());
    	TRoomExamStudent tes = new TRoomExamStudent();
    	tes.setExamId(examId);
    	tes.setStudentId(ShiroUtils.getSysUser().getStudent().getStudentId());
    	List<TRoomExamStudent> list = tRoomExamStudentService.selectTRoomExamStudentList(tes);
    	if(list.isEmpty()) {
    		mmap.put("isExam", "0");
    	}else {
    		mmap.put("isExam", "1");
    	}
    	return prefix + "/startexam";
    }
	
	@GetMapping("/get/{examId}")
	@ResponseBody
	public TExam get(@PathVariable("examId") Long examId) {
		return tExamService.selectTExamById(examId);
	}

	@SuppressWarnings("unchecked")
	@PostMapping("/submitexam")
	@Transactional
	@ResponseBody
	public String submitexam(HttpServletRequest request,TRoomExamStudent res) {
		String msg = "success";
		int result;
		try {
			List<TQuestionRecord> qrlist = Lists.newArrayList();
			Map<String, String> parm = RequestUtils.getRequestMap(request);
			Long paperId = Long.valueOf(parm.get("paperId"));
			Set<Entry<String, String>> set = parm.entrySet();
			int size = set.size();
			StringBuffer sb = new StringBuffer();
			sb.append("{\"answerList\":[ ");
			for(int i=1; i<=size ; i++) {
				if(parm.containsKey("questionVal"+i)) {
					String answer = parm.get("questionVal"+i);
					String questionId = parm.get("questionId"+i);
					String fg = "";
					if(i>1) {
						fg = ",";
					}
					sb.append(fg).append("{\"questionId\":\""+questionId+"\",\"answer\":\""+answer+"\"}");
					TQuestionRecord qs = new TQuestionRecord();
					qs.setStudentAnswer(answer);
					qs.setQuestionId(Long.valueOf(questionId));
					qs.setExamId(res.getExamId());
					qs.setStudentId(res.getStudentId());
					qrlist.add(qs);
				}
			}
			sb.append(" ]}");
			res.setStudentAnswerJson(sb.toString());
			result = tRoomExamStudentService.insertTRoomExamStudent(res);
			if(result==0) {
				msg = "error";
			}else {
				//处理判卷线程
				Thread thread = new Thread(new Runnable() {
					public void run() {
						TPaper p = tPaperService.selectTPaperById(paperId);
						if(p.getJudgeMode().equals("1")) {//如果为系统判卷
							JSONObject json = JSONObject.parseObject(p.getExamAnswerJson());
							JSONArray array = json.getJSONArray("answerList");
							Double stuAllScore = 0.00;
							for(Object o : array) {
								Long questionId = Long.valueOf(JSONObject.parseObject(o.toString()).getString("questionId"));
								Double score = Double.valueOf(JSONObject.parseObject(o.toString()).getString("score"));
								Long questionTypeId = Long.valueOf(JSONObject.parseObject(o.toString()).getString("questionType"));
								String answer = JSONObject.parseObject(o.toString()).getString("answer");
								for(TQuestionRecord s : qrlist) {
									if(questionId.equals(s.getQuestionId())) {
										s.setAnswer(answer);
										s.setScore(score);
										s.setQuestionTypeId(questionTypeId);
										//如果答案一致
										if(StringUtils.trim(answer).equals(StringUtils.trim(s.getStudentAnswer()))) {
											stuAllScore += score;
											s.setStudentScore(score);
											s.setQuestionTypeId(questionTypeId);
										}else {
											s.setStudentScore(0.00);
										}
									}
								}
							}
							res.setScore(stuAllScore);
							res.setJudgeState("1");
							tRoomExamStudentService.updateTRoomExamStudent(res);
							tRoomExamStudentService.insertQuestionRecords(qrlist);
						}
					}
				});
				thread.start();
			}
		} catch (Exception e) {
			e.printStackTrace();
			msg = "error";
		}
		return msg;
	}

}
